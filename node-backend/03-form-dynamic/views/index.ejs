<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!--아래 cdn은 axios사용을 위한 것-->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <form name="register">
      <input type="text" name="id" placeholder="ID" value="lily" pattern="^[a-z0-9]{5,}$" title="소문자 숫자이용 5글자 이상" required />
      <input type="password" name="pw" placeholder="password" value="1234" />
      <input type="text" name="name" placeholder="이름" value="lily" />
      <div>
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>
        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios post 전송</button>
        <button type="button" onclick="fetchGet()">fetch get 전송</button>
        <button type="button" onclick="fetchPost()">fetch post 전송</button>
      </div>
      <!-- 아래 두 줄은 일발(동기) 폼 전송 할 때 type submit-->
      <!-- <input type="submit" /> -->
      <!-- <button type="submit">제출</button> -->
    </form>
    <h3 id="result"></h3>

    <script>
      //--------------------기본 getData()만들기 --------------------
      //input에서 입력한 값에 대해 유효성을 검사 할 것이다.
      //submit으로 하는게 아니라 자동으로 폼 검증이 안되기 때문!
      //여기서 유효성 검사는 input태그를 기반으로 진행한다. 패턴 걸었으면 그걸 검사.
      //checkValidity : 폼의 유효성 검사를 해서 boolean값을 반환한다.
      //reportValidity : 오류가 있으면 창을 띄워 보고를 해준다.
      //유효성 검사를 통과하지 못한 input에 대해 report 해주는 것.
      //근데 이 부분에서 실행을 멈추는 건 아니다. 검사만 한다!
      //그래서 return false;을 해준다. 
      //함수는 return을 만나면 이어지는 다음 함수는 실행시키지 않는다!
      //유효성 검사가 안되면 걍 종료시키겠다는 것
      //얘는 걍 함수의 문법. return으로 하거나 return false로 반환하면 된다.

      function getData() {
        const form = document.forms["register"];

        if (!form.checkValidity()) { //폼의 유효성 검사를 해서 boolean값 반환
          form.reportValidity(); //오
          return false;
        }
        //그럼 여기서 getData라는 함수의 반환값은 총 두가지 형태가 되게 된다.
        //false | object (객체 형태)

        const data = { //form에서 name으로 쓰인 게 key값이 된다.
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        }
        return data
      }
      //--------------------ajax --------------------
      //--------------------ajaxGet --------------------
      function ajaxGet() {
        const form = document.forms["register"];
        // console.dir(form);
        // console.log(form.id);
        // console.log(form.id.value);

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        }

        $.ajax({
          type: "GET", // 폼 속성 중 method
          url: "/ajax", // 폼 속성 중 action
          data: data,
          success: function(result) {
            // 응답을 성공적으로 받았을 경우에 대한 이벤트 핸들러
            // 매개변수(result)에 응답이 들어옴
            console.log(result);
            $("#result").html(`ajax get 요청 성공 ${result.name}님 환영합니다.`)
          }
        })
      }
      //--------------------ajaxPost --------------------
      function ajaxPost() {
        const data = getData()


        $.ajax({
          type: "POST",
          url: "/ajax",
          data: data,
          success: function(result) {
            console.log(result);
            $("#result").html(`ajax post 요청 성공 ${result.name}님 환영합니다.`)
          }
        })
      }

      //--------------------axios --------------------
      //--------------------axiosGet --------------------
      //axios함수는 promise객체를 return한다.
      //get요청으로 데이터 보낼때는 params를 사용한다.
      function axiosGet() {
        const data = getData()

        axios({
          method: "GET",
          url: "/axios",
          params: data
        }).then((res) => {
          // 서버에서 보내준 응답이 res에 담긴다.
          console.log("res", res)
          console.log("res.data", res.data)
          const {
            name
          } = res.data
          $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`)
        })
      }
      //--------------------axiosPost --------------------
      async function axiosPost() {
        //폼 유효성 검사를 하고 싶다. 이걸 뭘로 하는가?
        //input태그에 있는걸로 폼 유형성 검사를 하고 싶다? 이건 form의 submit이 일어날때만 동작한다.
        //동적 폼전송은 form의 submit을 이용하는게 아니고, js로 버튼에 함수를 걸어서 해준다.
        //따라서 js코드 내에서 폼 유효성 검사를 하는 코드를 작성해야 한다!
        //방법1) const regex=//, regex.test() 이용해서 하면 된다.
        //검사하는 식 입력해서 확인하는 함수를 걸어주는 것.
        //근데 이게 아니라 폼 요소자체로 유효성을 검사하고 싶으면?
        //방법2) form.checkValidity과 form.reportValidity을 사용해도 된다.
        const data = getData();
        //data에 받아오는 값은 두가지 형태 중 하나이다.
        //getData를 보면 된다. 얘도 결국 false 아니면 object이다.
        if (!data) return; //데이터의 값을 판별하는것
        //true여야 이 if문안으로 들어가서 다음꺼가 실행된다.
        //false면 걍 중지. 

        const res = await axios({
          method: "POST",
          url: "/axios",
          data: data,
        })

        axios({
          method: "POST",
          url: "/axios",
          data: data,
        }).then((res) => {
          console.log(res.data)
          const {
            name
          } = res.data

          console.log("res", res)
          console.log("res.data", res.data)
          $("#result").html(`axios post 요청 성공 ${res.data.name}님 환영합니다.`)

        })
      }
      //--------------------fetch --------------------
      //--------------------fetchGet --------------------
      async function fetchGet() {
        const data = getData();
        if (!data) return;
        //요청 부분에서 알아야할 것

        //fetch(url, option객체)
        //url은 action에 작성하는 그 url을 의미
        //option객체에 method가 있다.
        //fetch는 method 기본값이 get이다. 그래서 악적어도된다.
        //얘는 무조건 쿼리로 보내야한다. get요청시 데이터를 쿼리로 만들어서 url과 함께 전송

        //const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
        //쿼리만들수있는 메소드도 좆재한다.
        const urlQuery = new URLSearchParams(data).toString();

        //----------------fetchGet 방법1.then---------------------

        // fetch(`/fetch? ${urlQuery}`).then((res) => {
        //   console.log(res)
        //json()이용해서 파싱해야한다.
        //얘는 프로미스기반이다. 
        // const data = res.json()
        //console.log(data) 는 undifineㅇㄴ나온다. 
        //   return res.json()
        // }).then((res) => {
        //위에서 파싱해서 리턴하고 있기 때뭉네
        //이 함수의 res는 서버에서 여러분들이 응답한 객체
        //   console.log(res)
        // })

        //----------------fetchGet 방법2. 반만 async/await---------------------


        //----------------fetchGet 방법3.async/await---------------------

        const oriRes = await fetch(`/fetch? ${urlQuery}`)
        const res = await oriRes.json()
        console.log(res)

      }
      //--------------------fetchPost --------------------
      function fetchPost() {
        const data = getData()
        if (!data) return;

        //원래는 content-type기본값 사용: applocation/x-www-form-urlendodfed
        //하지만 feych post요청 시에 기본값을 사용했을 때 동작을 안함
        //content-type을 application/json형태로 변경해야한다.
        fetch("/fetch", {
          method: "POST",
          headers: {
            "content-Type": "application/json"
          },
          body: JSON.stringify(data) //data객체 (js)를 json형태로 변경
        }).then(() => {
          return res.json()
        }).then(() => {
          console.log(res)
          $("#result").html(`fetch post 요청 성공 ${res.name}님 환영합니다.`)
        })

      }
    </script>
  </body>
</html>